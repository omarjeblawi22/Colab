# -*- coding: utf-8 -*-
"""MLProto.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_0vGUu_3BkhPUPzVHDw2BGkFTieukGvH

**Machine Learning Prototype Model For Detecting Heart Disease**

## **Load Data**
"""

import pandas as pd
import numpy as np
dataframe = pd.read_csv("https://raw.githubusercontent.com/dataprofessor/data/master/heart-disease-cleveland.csv")
dataframe = dataframe.replace(r'^\s*$', np.nan, regex=True)
dataframe.replace('?', np.nan, inplace=True)
dataframe.dropna(inplace=True)
dataframe

"""## **Prep Data**

### Seperation of Data as x & y
"""

y = dataframe[' diagnosis']
y

x = dataframe.drop(' diagnosis', axis=1)
x

"""## **Split Data**

### Data splits into the traning set and the testing set
"""

from sklearn.model_selection import train_test_split

x_train , x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=100)

x_train

x_test

"""# **Model Build**

## **Linear Regression**
"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(x_train, y_train)

"""### **Prediction**"""

y_lr_train_prediction = lr.predict(x_train)
y_lr_test_prediction = lr.predict(x_test)

y_lr_train_prediction

y_lr_test_prediction

"""### **Model Performance Evaluation**"""

from sklearn.metrics import mean_squared_error, r2_score

lr_train_mse = mean_squared_error(y_train, y_lr_train_prediction)
lr_train_r2 = r2_score(y_train, y_lr_train_prediction)

lr_test_mse = mean_squared_error(y_test, y_lr_test_prediction)
lr_test_r2 = r2_score(y_test, y_lr_test_prediction)

lr_results = pd.DataFrame(['Linear regression', lr_train_mse, lr_train_r2, lr_test_mse, lr_test_r2]).transpose()
lr_results.columns = ['Method', 'Training MSE', 'Training R2', 'Test MSE', 'Test R2']

lr_results

"""## **Random Forest**"""

from sklearn.ensemble import RandomForestRegressor

rf = RandomForestRegressor(max_depth=2, random_state=100)
rf.fit(x_train, y_train)

"""### **Prediction**"""

y_rf_train_prediction = rf.predict(x_train)
y_rf_test_prediction = rf.predict(x_test)

"""### **Model Performance Evaluation**"""

from sklearn.metrics import mean_squared_error, r2_score

rf_train_mse = mean_squared_error(y_train, y_rf_train_prediction)
rf_train_r2 = r2_score(y_train, y_rf_train_prediction)

rf_test_mse = mean_squared_error(y_test, y_rf_test_prediction)
rf_test_r2 = r2_score(y_test, y_rf_test_prediction)

rf_results = pd.DataFrame(['Random forest', rf_train_mse, rf_train_r2, rf_test_mse, rf_test_r2]).transpose()
rf_results.columns = ['Method', 'Training MSE', 'Training R2', 'Test MSE', 'Test R2']
rf_results

"""## **Logistic Regression**

Sigmoid Function
"""

import tensorflow as tf

model = tf.keras.models.Sequential()

model = tf.keras.models.Sequential()

scaler = StandardScaler()

x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

model.add(tf.keras.layers.Dense(256, input_shape=(x_train_scaled.shape[1],), activation='sigmoid'))
model.add(tf.keras.layers.Dense(256, activation='sigmoid'))
model.add(tf.keras.layers.Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(x_train_scaled, y_train, epochs=1000)

model.evaluate(x_test, y_test)